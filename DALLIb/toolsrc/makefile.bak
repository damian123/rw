####################################################################
#
#		M A K E F I L E
#
#	Makefile for the Rogue Wave Tools.h++ library
#
#	$Id: makefile.in,v 6.15 1994/09/01 08:42:58 jims Exp $
#
#	This file has been processed by the shell script
#	"config_make" to create a CC makefile
#
#  (c) Copyright 1989, 1990, 1991, 1992, 1993, 1994 Rogue Wave Software, Inc.
#  ALL RIGHTS RESERVED
#
#  The software and information contained herein are proprietary to, and
#  comprise valuable trade secrets of, Rogue Wave Software, Inc., which
#  intends to preserve as trade secrets such software and information.
#  This software is furnished pursuant to a written license agreement and
#  may be used, copied, transmitted, and stored only in accordance with
#  the terms of such license and with the inclusion of the above copyright
#  notice.  This software and information or any other copies thereof may
#  not be provided or otherwise made available to any other person.
#
#  Notwithstanding any other lease or license that may pertain to, or
#  accompany the delivery of, this computer software and information, the
#  rights of the Government regarding its use, reproduction and disclosure
#  are as set forth in Section 52.227-19 of the FARS Computer
#  Software-Restricted Rights clause.
#  
#  Use, duplication, or disclosure by the Government is subject to
#  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
#  Technical Data and Computer Software clause at DFARS 52.227-7013.
#  
#  This computer software and information is distributed with "restricted
#  rights."  Use, duplication or disclosure is subject to restrictions as
#  set forth in NASA FAR SUP 18-52.227-79 (April 1985) "Commercial
#  Computer Software-Restricted Rights (April 1985)."  If the Clause at
#  18-52.227-74 "Rights in Data General" is specified in the contract,
#  then the "Alternate III" clause applies.
#
#
#
#
#	Rogue Wave Software, Inc.
#	P.O. Box 2328
#	Corvallis, OR 97339
#	Voice: 503-754-3010  FAX: 503-757-7350
#  
####################################################################

#       Uncomment the following to build an archive library:
LIB_SUFFIX=    .a

#	Uncomment the following to build a shared library:
#SHARED_CPPOPTS=   -PIC -D_RWBUILDSHARED
#SHARED_LDOPTS=    -G -lintl -lw -lnsl
#SHARED_LD_LINK=   CC
#LIB_SUFFIX=    .so.3

#	Uncomment the following to build a "debug" version
#DBG= 		-DRWDEBUG=1
#DBGNAME= 	g

#	Uncomment the following to build a thread-safe version
#MTSAFE= 	-DRW_MULTI_THREAD -D_REENTRANT
#MTNAME= 	_mt
#OBJ_MTSAFE= 	instmgr.o readmgr.o storemgr.o

#	The following should be set to whatever command
#	is necessary to invoke your compiler:
CPP=		CC

#	Options to be passed to your C++ compiler:
CPPOPTIONS=	-O

#	NAME can be used to give this particular library a special
#	name.  This is useful when working with more than one
#	compiler.  Specify on command line or here.
NAME=

#	LIBDIR and INCLDIR should be set to indicate where you
#	want the Rogue Wave library and include files to be
#	installed.
LIBDIR=		/usr/local/lib
INCLDIR=	/usr/local/include/rw

##################################################################
#
#	From here on, it's pretty much boilerplate.
#
##################################################################


SHELL=		/bin/sh
MOVE=		mv
COPY=		ln -s
RM=		rm -f

#	Where the library should be built:
RWLIB=		../lib

#	Rogue Wave header file include path:
RWINCL=		..

#	Rogue Wave header file directory:
RWDIR=		../rw

#	Base name of the library:
LIBNAME=	lib$(NAME)rwtool$(DBGNAME)$(FPNAME)$(MTNAME)

#	Root names (excluding suffix) of the library:
LIBROOT=        $(RWLIB)/$(LIBNAME)
#	Full name (including suffix) of the library:
LIBFULL=	$(RWLIB)/$(LIBNAME)$(LIB_SUFFIX)

#	Compile flags for the library:
CPPFLAGS= 	-I$(RWINCL) $(CPPOPTIONS) $(FPFLAG) $(DBG) $(SHARED_CPPOPTS) $(MTSAFE)

#	Extension used by this compiler:
EXT=		cpp

#	Any special flags used by this compiler:
SPECIAL=	 -mt

########################  Object code ########################

OBJS=	bench.o        bintree.o      bintrio.o      bintrit.o      \
	bitvec.o       bitvecio.o     bstream.o      btrdict.o      \
	btree.o        bufpage.o      cacheman.o     coreerr.o      \
	cstring.o      cstrngio.o     cstrio2.o      ct.o           \
        ctass.o                                                     \
	ctassio.o      ctclass.o      ctclassi.o     ctdate.o       \
	ctdatio.o      ctint.o        ctintio.o      ctio.o         \
	ctoken.o       ctqueued.o     ctstackd.o     ctstacki.o     \
	ctstr.o        ctstrio.o      cttime.o       cttimeio.o     \
	diskpage.o     disktree.o     dlist.o        dlistcol.o     \
	dlistit.o      dllfact.o                                    \
        factory.o      filemgr.o      gimp.o                        \
	hashdict.o     hashdit.o      hashspec.o     hashtab.o      \
	hashtbit.o     idendict.o     idenset.o      idlist.o       \
	idlistit.o     islist.o       islistit.o     iterator.o	    \
	locale.o       lodfault.o     lostream.o     match.o        \
	memck.o        mempool.o      message.o      model.o        \
	ordcltit.o     ordcltn.o      pstream.o      pvector.o      \
	ref.o          regexp.o       rwbag.o        rwbagit.o      \
	rwdate.o       rwdateio.o     rwerr.o        rwfile.o       \
	rwintio.o      rwset.o        rwtime.o       rwtimeio.o     \
	seqcltn.o      slist.o        slistcol.o     slistit.o      \
	sortvec.o      strngcv.o      timer.o        toolerr.o      \
	toolmisc.o     utility.o      vref.o         vstream.o      \
	wstring.o      wstrngio.o     wtoken.o       xdrstrea.o     \
	zone.o         

OBJECTS=	$(OBJS) $(OBJ_MTSAFE)

###########################   Targets    #############################

all:		$(LIBFULL)
lib:		$(LIBFULL)
objects:	$(OBJECTS)
includes:	# target used for Imake compatibility with other libraries

# Note: Shared libraries depend on their soname not containing
# a pathname so that LD_LIBRARY_PATH is searched.  Therefore do
# not use the $@ macro for the shared library build rule.

$(LIBROOT).a:	$(OBJECTS)
	-if [ ! -d ${RWLIB} ] ; then mkdir ${RWLIB} ;fi
	ar rvu ${LIBFULL} $?
	if [ -f /usr/bin/ranlib -o -f /bin/ranlib ] ; \
		then ranlib ${LIBFULL} ; fi
	@echo "Done building static library. \nBe sure to \"make clean\" before building shared or other\nvariations of the library."

$(LIBROOT)ns.a:	$(OBJECTS)
	-if [ ! -d ${RWLIB} ] ; then mkdir ${RWLIB} ;fi
	ar rvu ${LIBFULL} $?
	if [ -f /usr/bin/ranlib -o -f /bin/ranlib ] ; \
		then ranlib ${LIBFULL} ; fi
	if [ ! -f $(LIBROOT).a ] ; \
		then ln -s $(LIBROOT)ns.a $(LIBROOT).a ; fi
	@echo "Done building static library. \nBe sure to \"make clean\" before building shared or other\nvariations of the library."

$(LIBROOT).AIX_SHARED:	$(OBJECTS)
	-if [ ! -d ${RWLIB} ] ; then mkdir ${RWLIB} ;fi
	rm -f $(LIBFULL)
	ar crv $(LIBFULL) $(OBJECTS)
	../bin/makeAIXSharedLib -f $(LIBFULL)
	rm -f $(LIBFULL).noshr
	@echo "Done building shared library. \nBe sure to \"make clean\" before building static or other\nvariations of the library."

$(LIBROOT).so.2.1:	$(RWLIB) $(OBJECTS)
	$(SHARED_LD_LINK) $(SHARED_LDOPTS) -o $(LIBNAME)$(LIB_SUFFIX) $(OBJECTS)
	cp $(LIBNAME)$(LIB_SUFFIX) $(RWLIB) && rm $(LIBNAME)$(LIB_SUFFIX) 
	@echo "Done building shared library. \nBe sure to \"make clean\" before building static or other\nvariations of the library."

$(LIBROOT).so.2:	$(RWLIB) $(OBJECTS)
	$(SHARED_LD_LINK) $(SHARED_LDOPTS) -o $(LIBNAME)$(LIB_SUFFIX) $(OBJECTS)
	cp $(LIBNAME)$(LIB_SUFFIX) $(RWLIB) && rm $(LIBNAME)$(LIB_SUFFIX) 
	-ln -s $(LIBROOT).so.2 $(LIBROOT).so
	@echo "Done building shared library. \nBe sure to \"make clean\" before building static or other\nvariations of the library."

$(LIBROOT).sl:	$(RWLIB) $(OBJECTS)
	$(SHARED_LD_LINK) $(SHARED_LDOPTS) -o $(LIBNAME)$(LIB_SUFFIX) $(OBJECTS)
	cp $(LIBNAME)$(LIB_SUFFIX) $(RWLIB) && rm $(LIBNAME)$(LIB_SUFFIX) 
	@echo "Done building shared library. \nBe sure to \"make clean\" before building static or other\nvariations of the library."

$(RWLIB):
	mkdir $@

install:	${LIBFULL}
	-if [ ! -d ${LIBDIR} ] ; then mkdir ${LIBDIR} ;fi
	cp ${LIBFULL} ${LIBDIR}
	if [ -f /usr/bin/ranlib -o -f /bin/ranlib ] ; \
		then ranlib ${LIBDIR}/${LIBNAME}.a ;fi
	-if [ ! -d ${INCLDIR} ] ; then mkdir ${INCLDIR} ;fi
	cp ${RWDIR}/*.h  ${INCLDIR}
	cp ${RWDIR}/*.cc ${INCLDIR}

clean:
	$(RM) *.o *.dbx *.i *.ixx

##########################  Conversions   ########################

.PRECIOUS:	${LIBFULL}

.SUFFIXES: .cpp .C .cc .cxx .o

.cpp.o:
	$(CPP) $(CPPFLAGS) $(SPECIAL) -c $<
